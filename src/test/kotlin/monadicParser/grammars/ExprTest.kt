package monadicParser.grammars

import org.junit.jupiter.api.Test
import monadicParser.checkParser
import kotlin.test.Ignore

class ExprTest {

  @Test
  fun basic() {
    checkParser(E, "42")
    checkParser(E, "(42)")
    checkParser(E, "1+1")
    checkParser(E, "1*1")
  }

  @Test
  fun nested() {
    checkParser(E, "(1+2)*3")
    checkParser(E, "3*(1+2)")
    checkParser(E, "1+(1*2)")
    checkParser(E, "(1*(2+3))+45")
  }

  @Test
  fun long() {
    checkParser(E, "121+123+634+1+2+3+121+123+634+1+2+3+121+123+634+1+2+3+121+123+634+1+2+3+121+123+634+1+2+3+121+123+634+1+2+3+121+123+634+1+2+3+121+123+634+1+2+3+121+123+634+1+2+3+121+123+634+1+2+3+121+123+634+1+2+3")
    checkParser(E, "121*123*634*1*2*3*121*123*634*1*2*3*121*123*634*1*2*3*121*123*634*1*2*3*121*123*634*1*2*3*121*123*634*1*2*3*121*123*634*1*2*3*121*123*634*1*2*3*121*123*634*1*2*3*121*123*634*1*2*3*121*123*634*1*2*3")
  }

  @Test
  fun deepNested() {
    checkParser(E, "((((((((42))))))))")
    checkParser(E, "((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))")
  }

  @Test
  fun veryDeepNested() {
    checkParser(E, "((123+(3*(2+3))*2)+1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+3423*22*(1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+2*(23+22)))")
  }

  @Test
  fun veryVeryDeepNested() {
    checkParser(E, "((123+(3*(2+3))*2)+1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+((123+(3*(2+3))*2)+1+((((123+(3*(2+3))*2)+1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+3423*22*(1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+2*(23+22)))+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+3423*22*(1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+2*(23+22)))*22*(1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+2*(23+22)))")
  }

  @Test
  fun veryVeryVeryDeepNested() {
    checkParser(E, "((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((42))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))")
    checkParser(E, "((((123+(3*(2+3))*2)+1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+((123+(3*(((((123+(3*(2+3))*2)+1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+((123+(3*(2+3))*2)+1+((((123+(3*(2+3))*2)+1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+3423*22*(1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+2*(23+22)))+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(((123+(3*(2+3))*2)+1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+((123+(3*(2+3))*2)+1+((((123+(3*(2+3))*2)+1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+3423*22*(1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+2*(23+22)))+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+3423*22*(1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+2*(23+22)))*22*(1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+2*(23+22)))+22)))+3423*22*(1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+2*(23+22)))*22*(1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+2*(23+22)))+(3*(2+3))*2)+1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+((123+(3*(2+3))*2)+1+((((123+(3*(2+3))*2)+1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+3423*22*(1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+2*(23+22)))+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+3423*22*(1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+((((123+(3*(2+3))*2)+1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+((123+(3*(2+3))*2)+1+((((123+(3*(2+3))*2)+1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+3423*22*(1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+2*(23+22)))+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(((123+(3*(2+3))*2)+1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+((123+(3*(2+3))*2)+1+((((123+(3*(2+3))*2)+1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+3423*22*(1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+2*(23+22)))+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+3423*22*(1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+2*(23+22)))*22*(1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+2*(23+22)))+22)))+3423*22*(1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+2*(23+22)))*22*(1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+2*(23+22)))+(3*(2+3))*2)+1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+((123+(3*(2+3))*2)+1+((((123+(3*(2+3))*2)+1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+3423*22*(1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+2*(23+22)))+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+3423*22*(1+((123+(3*(((((123+(3*(2+3))*2)+1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+((123+(3*(2+3))*2)+1+((((123+(3*(2+3))*2)+1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+3423*22*(1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+2*(23+22)))+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(((123+(3*(2+3))*2)+1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+((123+(3*(2+3))*2)+1+((((123+(3*(2+3))*2)+1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+3423*22*(1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+2*(23+22)))+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+3423*22*(1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+2*(23+22)))*22*(1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+2*(23+22)))+22)))+3423*22*(1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+2*(23+22)))*22*(1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+2*(23+22)))+(3*(2+3))*2)+1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+((123+(3*(2+3))*2)+1+((((123+(3*(2+3))*2)+1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+3423*22*(1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+2*(23+22)))+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+3423*22*(1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+2*(23+22)))*22*(1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+2*(23+22)))+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+2*(23+22)))*22*(1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+2*(23+22))))))+2*(23+22)))*22*(1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+2*(23+22)))+3))*2)+1+((((123+(3*(2+3))*2)+1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+3423*22*(1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+2*(23+22)))+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(((123+(3*(2+3))*2)+1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+((123+(3*(2+3))*2)+1+((((123+(3*(2+3))*2)+1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+3423*22*(1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+2*(23+22)))+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+3423*22*(1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+2*(23+22)))*22*(1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+2*(23+22)))+22)))+3423*22*(1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+2*(23+22)))*22*(1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+2*(23+22)))+(3*(2+3))*2)+1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+((123+(3*(2+3))*2)+1+((((123+(3*(2+3))*2)+1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+3423*22*(1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+2*(23+22)))+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+3423*22*(1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+2*(23+22)))*22*(1+((123+(3*(2+3))*2)+1+223+3423*22*(1+24+2*(23+22)))+2*(23+22)))")
  }
}
